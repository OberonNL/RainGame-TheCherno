package net.babbster.rain;

import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.image.BufferStrategy;

import javax.swing.JFrame;

/**
 * Game class
 * @author tarball
 */
public class Game extends Canvas implements Runnable {
	private static final long serialVersionUID = 1L;
	public static int width = 300;
	public static int height = width / 16 * 9;
	public static int scale = 3;
	
	private Thread thread;
	private boolean running = false;
	private JFrame frame;

	/**
	 * Constructor
	 */
	public Game() {
		Dimension size = new Dimension(width * scale, height * scale);
		
		this.setPreferredSize(size);
		frame = new JFrame();
	}

	/**
	 * Start game thread
	 */
	public synchronized void start() {
		running = true;
		thread = new Thread(this, "Game");
		thread.start();
	}

	/**
	 * Stop game thread
	 */
	public synchronized void stop() {
		running = false;
		try {
			thread.join();
		} catch (InterruptedException error) {
			error.printStackTrace();
		}
	}

	/**
	 * The work that happens in the game thread
	 */
	@Override
	public void run() {
		// Game loop
		while (running) {
			//System.out.printf("Height: %d - Width: %d\n", height, width);
			
			//update: we do the tick or update method here - this is game logic
			update();
			//render - we update the graphics here
			render();
		}
	}
	
	/**
	 * render - all drawing work
	 */
	public void render(){
		//create the back buffer
		BufferStrategy buffer = this.getBufferStrategy();
	}
	
	/**
	 * update - game logic
	 */
	public void update(){
		
	}

	/**
	 * Entry point 
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		Game game = new Game();
		game.frame.setResizable(false);
		game.frame.setTitle("Rain");
		game.frame.add(game);
		game.frame.pack();
		game.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		game.frame.setLocationRelativeTo(null);
		game.frame.setVisible(true);
		game.start();
	}
}
